package oracle.summit.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.List;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;

import oracle.summit.base.SummitViewRowImpl;
import oracle.summit.model.entities.ItemEOImpl;
import oracle.summit.model.entities.ProductEOImpl;
import oracle.summit.model.views.common.ItemVORow;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 16 18:09:28 GMT 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ItemVORowImpl extends SummitViewRowImpl implements ItemVORow {

    public static final int ENTITY_ITEMEO = 0;
    public static final int ENTITY_PRODUCTEO = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        OrdId {
            public Object get(ItemVORowImpl obj) {
                return obj.getOrdId();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setOrdId((Number) value);
            }
        }
        ,
        ItemId {
            public Object get(ItemVORowImpl obj) {
                return obj.getItemId();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProductId {
            public Object get(ItemVORowImpl obj) {
                return obj.getProductId();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setProductId((Number) value);
            }
        }
        ,
        Price {
            public Object get(ItemVORowImpl obj) {
                return obj.getPrice();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setPrice((Number) value);
            }
        }
        ,
        Quantity {
            public Object get(ItemVORowImpl obj) {
                return obj.getQuantity();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setQuantity((Number) value);
            }
        }
        ,
        QuantityShipped {
            public Object get(ItemVORowImpl obj) {
                return obj.getQuantityShipped();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setQuantityShipped((Number) value);
            }
        }
        ,
        Name {
            public Object get(ItemVORowImpl obj) {
                return obj.getName();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Id {
            public Object get(ItemVORowImpl obj) {
                return obj.getId();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemTotal {
            public Object get(ItemVORowImpl obj) {
                return obj.getItemTotal();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ImageNameFromDB {
            public Object get(ItemVORowImpl obj) {
                return obj.getImageNameFromDB();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ShortDesc {
            public Object get(ItemVORowImpl obj) {
                return obj.getShortDesc();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SuggestedWhlslPrice {
            public Object get(ItemVORowImpl obj) {
                return obj.getSuggestedWhlslPrice();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ViewAttr {
            public Object get(ItemVORowImpl obj) {
                return obj.getViewAttr();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InventoryVO {
            public Object get(ItemVORowImpl obj) {
                return obj.getInventoryVO();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProductVO1 {
            public Object get(ItemVORowImpl obj) {
                return obj.getProductVO1();
            }

            public void put(ItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ItemVORowImpl object);

        public abstract void put(ItemVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ORDID = AttributesEnum.OrdId.index();
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int PRODUCTID = AttributesEnum.ProductId.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int QUANTITYSHIPPED = AttributesEnum.QuantityShipped.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int ITEMTOTAL = AttributesEnum.ItemTotal.index();
    public static final int IMAGENAMEFROMDB = AttributesEnum.ImageNameFromDB.index();
    public static final int SHORTDESC = AttributesEnum.ShortDesc.index();
    public static final int SUGGESTEDWHLSLPRICE = AttributesEnum.SuggestedWhlslPrice.index();
    public static final int VIEWATTR = AttributesEnum.ViewAttr.index();
    public static final int INVENTORYVO = AttributesEnum.InventoryVO.index();
    public static final int PRODUCTVO1 = AttributesEnum.ProductVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ItemVORowImpl() {
    }

    /**
     * Gets ItemEO entity object.
     * @return the ItemEO
     */
    public ItemEOImpl getItemEO() {
        return (ItemEOImpl)getEntity(0);
    }

    /**
     * Gets ProductEO entity object.
     * @return the ProductEO
     */
    public ProductEOImpl getProductEO() {
        return (ProductEOImpl)getEntity(1);
    }


    /**
     * Gets the attribute value for ORD_ID using the alias name OrdId.
     * @return the ORD_ID
     */
    public Number getOrdId() {
        return (Number) getAttributeInternal(ORDID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORD_ID using the alias name OrdId.
     * @param value value to set the ORD_ID
     */
    public void setOrdId(Number value) {
        setAttributeInternal(ORDID, value);
    }

    /**
     * Gets the attribute value for ITEM_ID using the alias name ItemId.
     * @return the ITEM_ID
     */
    public DBSequence getItemId() {
        return (DBSequence) getAttributeInternal(ITEMID);
    }


    /**
     * Gets the attribute value for PRODUCT_ID using the alias name ProductId.
     * @return the PRODUCT_ID
     */
    public Number getProductId() {
        return (Number)getAttributeInternal(PRODUCTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PRODUCT_ID using the alias name ProductId.
     * @param value value to set the PRODUCT_ID
     */
    public void setProductId(Number value) {
        setAttributeInternal(PRODUCTID, value);
    }

    /**
     * Gets the attribute value for PRICE using the alias name Price.
     * @return the PRICE
     */
    public Number getPrice() {
        return (Number)getAttributeInternal(PRICE);
    }


    /**
     * Sets <code>value</code> as attribute value for PRICE using the alias name Price.
     * @param value value to set the PRICE
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for QUANTITY using the alias name Quantity.
     * @return the QUANTITY
     */
    public Number getQuantity() {
        return (Number)getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as attribute value for QUANTITY using the alias name Quantity.
     * @param value value to set the QUANTITY
     */
    public void setQuantity(Number value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for QUANTITY_SHIPPED using the alias name QuantityShipped.
     * @return the QUANTITY_SHIPPED
     */
    public Number getQuantityShipped() {
        return (Number)getAttributeInternal(QUANTITYSHIPPED);
    }

    /**
     * Sets <code>value</code> as attribute value for QUANTITY_SHIPPED using the alias name QuantityShipped.
     * @param value value to set the QUANTITY_SHIPPED
     */
    public void setQuantityShipped(Number value) {
        setAttributeInternal(QUANTITYSHIPPED, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }


    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public Number getId() {
        return (Number)getAttributeInternal(ID);
    }


    /**
     * Gets the attribute value for the calculated attribute ItemTotal.
     * @return the ItemTotal
     */
    public Number getItemTotal() {
        return (Number)getAttributeInternal(ITEMTOTAL);
    }


    /**
     * Gets the attribute value for the calculated attribute ImageNameFromDB.
     * @return the ImageNameFromDB
     */
    public String getImageNameFromDB() {
        return (String)getAttributeInternal(IMAGENAMEFROMDB);
    }


    /**
     * Gets the attribute value for SHORT_DESC using the alias name ShortDesc.
     * @return the SHORT_DESC
     */
    public String getShortDesc() {
        return (String)getAttributeInternal(SHORTDESC);
    }


    /**
     * Gets the attribute value for SUGGESTED_WHLSL_PRICE using the alias name SuggestedWhlslPrice.
     * @return the SUGGESTED_WHLSL_PRICE
     */
    public Number getSuggestedWhlslPrice() {
        return (Number)getAttributeInternal(SUGGESTEDWHLSLPRICE);
    }


    /**
     * Gets the attribute value for the calculated attribute ViewAttr.
     * @return the ViewAttr
     */
    public String getViewAttr() {
        return (String) getAttributeInternal(VIEWATTR);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link InventoryVO.
     */
    public RowIterator getInventoryVO() {
        return (RowIterator)getAttributeInternal(INVENTORYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ProductVO1.
     */
    public RowSet getProductVO1() {
        return (RowSet)getAttributeInternal(PRODUCTVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * Sample exportable method.
     */
    public void sampleItemVORowImplExportable() {
    }

    /**
     * Sample exportable method.
     */
    public void sampleItemVORowImplExportable2(String testParam1) {
    }

    /**
     * Sample exportable method.
     */
    public List<String> sampleItemVORowImplExportable3(List<String> listParam,
                                                       String testParam1) {
        return listParam;
    }

    /**
     * Added - takes in the product id and returns a filename from the database
     * using the GET_PRODUCT_IMAGE db stored function which looks up the image 
     * filename according to the image_id associated with the product id.
     *  The Original Forms application uses files with a TIF extension we
     *  changed these images to JPG
     */
    public String readImageNameFromDB(Number id) {       
        CallableStatement cs = null;
        cs= this.getDBTransaction().createCallableStatement("begin ?:=GET_PRODUCT_IMAGE(?); end;",0);
        try {
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setObject(2,id);
            cs.execute();
            Object returnVal = cs.getObject(1);
            return returnVal.toString();
        } catch (SQLException e) {
            //print exception if SQL fails. In production systems you may want to log the 
            //issue and fail more gracefully e.g by returning NULL r an empty String 
            e.printStackTrace();
        }
       return "No File";
    }


    /**
     * Added - instead of simply deleting an order item, I will set the quantity to 0 and then delete it
     *
     */
    public void deleteOrderItem() {
        setQuantity(new Number(0));
        remove();
    }
}
